# generated by datamodel-codegen:
#   filename:  https://stac-extensions.github.io/projection/v1.0.0/schema.json
#   timestamp: 2022-12-07T18:54:27+00:00

from __future__ import annotations

from enum import Enum
from typing import Any, Dict, List, Optional, Union

from pydantic import BaseModel, Extra, Field, confloat

from . import projjson


class StacExtensions(BaseModel):
    stac_extensions: List


class ProjCentroid(BaseModel):
    lat: confloat(ge=-90.0, le=90.0)
    lon: confloat(ge=-180.0, le=180.0)


class Type(Enum):
    AbridgedTransformation = 'AbridgedTransformation'


class Type1(Enum):
    Axis = 'Axis'


class Direction(Enum):
    north = 'north'
    northNorthEast = 'northNorthEast'
    northEast = 'northEast'
    eastNorthEast = 'eastNorthEast'
    east = 'east'
    eastSouthEast = 'eastSouthEast'
    southEast = 'southEast'
    southSouthEast = 'southSouthEast'
    south = 'south'
    southSouthWest = 'southSouthWest'
    southWest = 'southWest'
    westSouthWest = 'westSouthWest'
    west = 'west'
    westNorthWest = 'westNorthWest'
    northWest = 'northWest'
    northNorthWest = 'northNorthWest'
    up = 'up'
    down = 'down'
    geocentricX = 'geocentricX'
    geocentricY = 'geocentricY'
    geocentricZ = 'geocentricZ'
    columnPositive = 'columnPositive'
    columnNegative = 'columnNegative'
    rowPositive = 'rowPositive'
    rowNegative = 'rowNegative'
    displayRight = 'displayRight'
    displayLeft = 'displayLeft'
    displayUp = 'displayUp'
    displayDown = 'displayDown'
    forward = 'forward'
    aft = 'aft'
    port = 'port'
    starboard = 'starboard'
    clockwise = 'clockwise'
    counterClockwise = 'counterClockwise'
    towards = 'towards'
    awayFrom = 'awayFrom'
    future = 'future'
    past = 'past'
    unspecified = 'unspecified'


class Bbox(BaseModel):
    class Config:
        extra = Extra.forbid

    east_longitude: float
    west_longitude: float
    south_latitude: float
    north_latitude: float


class Type2(Enum):
    BoundCRS = 'BoundCRS'


class Type3(Enum):
    CompoundCRS = 'CompoundCRS'


class Type4(Enum):
    ConcatenatedOperation = 'ConcatenatedOperation'


class Type5(Enum):
    Conversion = 'Conversion'


class Type6(Enum):
    CoordinateSystem = 'CoordinateSystem'


class Subtype(Enum):
    Cartesian = 'Cartesian'
    spherical = 'spherical'
    ellipsoidal = 'ellipsoidal'
    vertical = 'vertical'
    ordinal = 'ordinal'
    parametric = 'parametric'
    TemporalDateTime = 'TemporalDateTime'
    TemporalCount = 'TemporalCount'
    TemporalMeasure = 'TemporalMeasure'


class Type7(Enum):
    DatumEnsemble = 'DatumEnsemble'


class Type8(Enum):
    DerivedEngineeringCRS = 'DerivedEngineeringCRS'


class Type9(Enum):
    DerivedGeodeticCRS = 'DerivedGeodeticCRS'
    DerivedGeographicCRS = 'DerivedGeographicCRS'


class Type10(Enum):
    DerivedParametricCRS = 'DerivedParametricCRS'


class Type11(Enum):
    DerivedProjectedCRS = 'DerivedProjectedCRS'


class Type12(Enum):
    DerivedTemporalCRS = 'DerivedTemporalCRS'


class Type13(Enum):
    DerivedVerticalCRS = 'DerivedVerticalCRS'


class Type14(Enum):
    DynamicGeodeticReferenceFrame = 'DynamicGeodeticReferenceFrame'


class Type15(Enum):
    DynamicVerticalReferenceFrame = 'DynamicVerticalReferenceFrame'


class Type16(Enum):
    EngineeringCRS = 'EngineeringCRS'


class Type17(Enum):
    EngineeringDatum = 'EngineeringDatum'


class Type18(Enum):
    GeodeticCRS = 'GeodeticCRS'
    GeographicCRS = 'GeographicCRS'


class Type19(Enum):
    GeodeticReferenceFrame = 'GeodeticReferenceFrame'


class Id(BaseModel):
    class Config:
        extra = Extra.forbid

    authority: str
    code: Union[str, int]


class Ids(BaseModel):
    __root__: List[Id]


class Type20(Enum):
    OperationMethod = 'OperationMethod'


class IdIdsMutuallyExclusive(BaseModel):
    __root__: Any


class OneAndOnlyOneOfDatumOrDatumEnsemble(BaseModel):
    pass


class ObjectUsageItem(BaseModel):
    _schema: Optional[str] = Field(None, alias='$schema')
    scope: Optional[str] = None
    area: Optional[str] = None
    bbox: Optional[Bbox] = None
    remarks: Optional[str] = None
    id: Optional[Id] = None
    ids: Optional[Ids] = None


class Type21(Enum):
    ParameterValue = 'ParameterValue'


class Type22(Enum):
    ParametricCRS = 'ParametricCRS'


class Type23(Enum):
    ParametricDatum = 'ParametricDatum'


class Type24(Enum):
    PrimeMeridian = 'PrimeMeridian'


class Type25(Enum):
    ProjectedCRS = 'ProjectedCRS'


class Type26(Enum):
    TemporalCRS = 'TemporalCRS'


class Type27(Enum):
    TemporalDatum = 'TemporalDatum'


class Type28(Enum):
    Transformation = 'Transformation'


class UnitEnum(Enum):
    metre = 'metre'
    degree = 'degree'
    unity = 'unity'


class Type29(Enum):
    LinearUnit = 'LinearUnit'
    AngularUnit = 'AngularUnit'
    ScaleUnit = 'ScaleUnit'
    TimeUnit = 'TimeUnit'
    ParametricUnit = 'ParametricUnit'
    Unit = 'Unit'


class UnitItem(BaseModel):
    class Config:
        extra = Extra.forbid

    type: Type29
    name: str
    conversion_factor: Optional[float] = None
    id: Optional[Id] = None
    ids: Optional[Ids] = None


class Unit(BaseModel):
    __root__: Union[UnitEnum, UnitItem]


class Usage(BaseModel):
    class Config:
        extra = Extra.forbid

    scope: Optional[str] = None
    area: Optional[str] = None
    bbox: Optional[Bbox] = None


class Usages(BaseModel):
    __root__: List[Usage]


class ValueAndUnit(BaseModel):
    class Config:
        extra = Extra.forbid

    value: float
    unit: Unit


class ValueInDegreeOrValueAndUnit(BaseModel):
    __root__: Union[float, ValueAndUnit]


class ValueInMetreOrValueAndUnit(BaseModel):
    __root__: Union[float, ValueAndUnit]


class Type30(Enum):
    VerticalCRS = 'VerticalCRS'


class Type31(Enum):
    VerticalReferenceFrame = 'VerticalReferenceFrame'


class Type32(Enum):
    Point = 'Point'


class GeometryItem(BaseModel):
    type: Type32
    coordinates: List[float] = Field(..., min_items=2)
    bbox: Optional[List[float]] = Field(None, min_items=4)


class Type33(Enum):
    LineString = 'LineString'


class Coordinate(BaseModel):
    __root__: List[Any]


class GeometryItem1(BaseModel):
    type: Type33
    coordinates: List[Coordinate] = Field(..., min_items=2)
    bbox: Optional[List[float]] = Field(None, min_items=4)


class Type34(Enum):
    Polygon = 'Polygon'


class Coordinate1(BaseModel):
    __root__: List[Any]


class GeometryItem2(BaseModel):
    type: Type34
    coordinates: List[List[Coordinate1]]
    bbox: Optional[List[float]] = Field(None, min_items=4)


class Type35(Enum):
    MultiPoint = 'MultiPoint'


class GeometryItem3(BaseModel):
    type: Type35
    coordinates: List[List[float]]
    bbox: Optional[List[float]] = Field(None, min_items=4)


class Type36(Enum):
    MultiLineString = 'MultiLineString'


class Coordinate2(BaseModel):
    __root__: List[Any]


class GeometryItem4(BaseModel):
    type: Type36
    coordinates: List[List[Coordinate2]]
    bbox: Optional[List[float]] = Field(None, min_items=4)


class Type37(Enum):
    MultiPolygon = 'MultiPolygon'


class Coordinate3(BaseModel):
    __root__: List[Any]


class GeometryItem5(BaseModel):
    type: Type37
    coordinates: List[List[List[Coordinate3]]]
    bbox: Optional[List[float]] = Field(None, min_items=4)


class Geometry(BaseModel):
    __root__: Union[
        GeometryItem,
        GeometryItem1,
        GeometryItem2,
        GeometryItem3,
        GeometryItem4,
        GeometryItem5,
    ] = Field(..., title='GeoJSON Geometry')


class Axis(BaseModel):
    class Config:
        extra = Extra.forbid

    _schema: Optional[str] = Field(None, alias='$schema')
    type: Optional[Type1] = None
    name: str
    abbreviation: str
    direction: Direction
    unit: Optional[Unit] = None
    id: Optional[Id] = None
    ids: Optional[Ids] = None


class CoordinateSystem(BaseModel):
    class Config:
        extra = Extra.forbid

    _schema: Optional[str] = Field(None, alias='$schema')
    type: Optional[Type6] = None
    name: Optional[str] = None
    subtype: Subtype
    axis: List[Axis]
    id: Optional[Id] = None
    ids: Optional[Ids] = None


class Member(BaseModel):
    class Config:
        extra = Extra.forbid

    name: str
    id: Optional[Id] = None
    ids: Optional[Ids] = None


class Ellipsoid(BaseModel):
    pass


class Method(BaseModel):
    class Config:
        extra = Extra.forbid

    _schema: Optional[str] = Field(None, alias='$schema')
    type: Optional[Type20] = None
    name: str
    id: Optional[Id] = None
    ids: Optional[Ids] = None


class ObjectUsageItem1(BaseModel):
    _schema: Optional[str] = Field(None, alias='$schema')
    usages: Optional[Usages] = None
    remarks: Optional[str] = None
    id: Optional[Id] = None
    ids: Optional[Ids] = None


class ObjectUsage(BaseModel):
    __root__: Union[ObjectUsageItem, ObjectUsageItem1]


class ParameterValue(BaseModel):
    class Config:
        extra = Extra.forbid

    _schema: Optional[str] = Field(None, alias='$schema')
    type: Optional[Type21] = None
    name: str
    value: Union[str, float]
    unit: Optional[Unit] = None
    id: Optional[Id] = None
    ids: Optional[Ids] = None


class ParametricDatum(BaseModel):
    class Config:
        extra = Extra.forbid

    type: Optional[Type23] = None
    name: str
    anchor: Optional[str] = None
    _schema: Optional[Any] = Field(None, alias='$schema')
    scope: Optional[Any] = None
    area: Optional[Any] = None
    bbox: Optional[Any] = None
    usages: Optional[Any] = None
    remarks: Optional[Any] = None
    id: Optional[Any] = None
    ids: Optional[Any] = None


class PrimeMeridian(BaseModel):
    class Config:
        extra = Extra.forbid

    _schema: Optional[str] = Field(None, alias='$schema')
    type: Optional[Type24] = None
    name: str
    longitude: Optional[ValueInDegreeOrValueAndUnit] = None
    id: Optional[Id] = None
    ids: Optional[Ids] = None


class TemporalDatum(BaseModel):
    class Config:
        extra = Extra.forbid

    type: Optional[Type27] = None
    name: str
    calendar: str
    time_origin: Optional[str] = None
    _schema: Optional[Any] = Field(None, alias='$schema')
    scope: Optional[Any] = None
    area: Optional[Any] = None
    bbox: Optional[Any] = None
    usages: Optional[Any] = None
    remarks: Optional[Any] = None
    id: Optional[Any] = None
    ids: Optional[Any] = None


class VerticalReferenceFrame(BaseModel):
    class Config:
        extra = Extra.forbid

    type: Optional[Type31] = None
    name: str
    anchor: Optional[str] = None
    _schema: Optional[Any] = Field(None, alias='$schema')
    scope: Optional[Any] = None
    area: Optional[Any] = None
    bbox: Optional[Any] = None
    usages: Optional[Any] = None
    remarks: Optional[Any] = None
    id: Optional[Any] = None
    ids: Optional[Any] = None


class AbridgedTransformation(BaseModel):
    class Config:
        extra = Extra.forbid

    _schema: Optional[str] = Field(None, alias='$schema')
    type: Optional[Type] = None
    name: str
    method: Method
    parameters: List[ParameterValue]
    id: Optional[Id] = None
    ids: Optional[Ids] = None


class Conversion(BaseModel):
    class Config:
        extra = Extra.forbid

    _schema: Optional[str] = Field(None, alias='$schema')
    type: Optional[Type5] = None
    name: str
    method: Method
    parameters: Optional[List[ParameterValue]] = None
    id: Optional[Id] = None
    ids: Optional[Ids] = None


class DatumEnsemble(BaseModel):
    class Config:
        extra = Extra.forbid

    _schema: Optional[str] = Field(None, alias='$schema')
    type: Optional[Type7] = None
    name: str
    members: List[Member]
    ellipsoid: Optional[Ellipsoid] = None
    accuracy: str
    id: Optional[Id] = None
    ids: Optional[Ids] = None


class DynamicVerticalReferenceFrame(VerticalReferenceFrame):
    class Config:
        extra = Extra.forbid

    type: Optional[Type15] = None
    name: Any
    anchor: Optional[Any] = None
    frame_reference_epoch: float
    deformation_model: Optional[str] = None
    _schema: Optional[Any] = Field(None, alias='$schema')
    scope: Optional[Any] = None
    area: Optional[Any] = None
    bbox: Optional[Any] = None
    usages: Optional[Any] = None
    remarks: Optional[Any] = None
    id: Optional[Any] = None
    ids: Optional[Any] = None


class EngineeringDatum(BaseModel):
    class Config:
        extra = Extra.forbid

    type: Optional[Type17] = None
    name: str
    anchor: Optional[str] = None
    _schema: Optional[Any] = Field(None, alias='$schema')
    scope: Optional[Any] = None
    area: Optional[Any] = None
    bbox: Optional[Any] = None
    usages: Optional[Any] = None
    remarks: Optional[Any] = None
    id: Optional[Any] = None
    ids: Optional[Any] = None


class GeodeticReferenceFrame(BaseModel):
    class Config:
        extra = Extra.forbid

    type: Optional[Type19] = None
    name: str
    anchor: Optional[str] = None
    ellipsoid: Ellipsoid
    prime_meridian: Optional[PrimeMeridian] = None
    _schema: Optional[Any] = Field(None, alias='$schema')
    scope: Optional[Any] = None
    area: Optional[Any] = None
    bbox: Optional[Any] = None
    usages: Optional[Any] = None
    remarks: Optional[Any] = None
    id: Optional[Any] = None
    ids: Optional[Any] = None


class ParametricCrs(BaseModel):
    class Config:
        extra = Extra.forbid

    type: Optional[Type22] = None
    name: str
    datum: ParametricDatum
    coordinate_system: Optional[CoordinateSystem] = None
    _schema: Optional[Any] = Field(None, alias='$schema')
    scope: Optional[Any] = None
    area: Optional[Any] = None
    bbox: Optional[Any] = None
    usages: Optional[Any] = None
    remarks: Optional[Any] = None
    id: Optional[Any] = None
    ids: Optional[Any] = None


class TemporalCrs(BaseModel):
    class Config:
        extra = Extra.forbid

    type: Optional[Type26] = None
    name: str
    datum: TemporalDatum
    coordinate_system: Optional[CoordinateSystem] = None
    _schema: Optional[Any] = Field(None, alias='$schema')
    scope: Optional[Any] = None
    area: Optional[Any] = None
    bbox: Optional[Any] = None
    usages: Optional[Any] = None
    remarks: Optional[Any] = None
    id: Optional[Any] = None
    ids: Optional[Any] = None


class DerivedParametricCrs(BaseModel):
    class Config:
        extra = Extra.forbid

    type: Optional[Type10] = None
    name: str
    base_crs: ParametricCrs
    conversion: Conversion
    coordinate_system: CoordinateSystem
    _schema: Optional[Any] = Field(None, alias='$schema')
    scope: Optional[Any] = None
    area: Optional[Any] = None
    bbox: Optional[Any] = None
    usages: Optional[Any] = None
    remarks: Optional[Any] = None
    id: Optional[Any] = None
    ids: Optional[Any] = None


class DerivedTemporalCrs(BaseModel):
    class Config:
        extra = Extra.forbid

    type: Optional[Type12] = None
    name: str
    base_crs: TemporalCrs
    conversion: Conversion
    coordinate_system: CoordinateSystem
    _schema: Optional[Any] = Field(None, alias='$schema')
    scope: Optional[Any] = None
    area: Optional[Any] = None
    bbox: Optional[Any] = None
    usages: Optional[Any] = None
    remarks: Optional[Any] = None
    id: Optional[Any] = None
    ids: Optional[Any] = None


class DynamicGeodeticReferenceFrame(GeodeticReferenceFrame):
    class Config:
        extra = Extra.forbid

    type: Optional[Type14] = None
    name: Any
    anchor: Optional[Any] = None
    ellipsoid: Any
    prime_meridian: Optional[Any] = None
    frame_reference_epoch: float
    deformation_model: Optional[str] = None
    _schema: Optional[Any] = Field(None, alias='$schema')
    scope: Optional[Any] = None
    area: Optional[Any] = None
    bbox: Optional[Any] = None
    usages: Optional[Any] = None
    remarks: Optional[Any] = None
    id: Optional[Any] = None
    ids: Optional[Any] = None


class EngineeringCrs(BaseModel):
    class Config:
        extra = Extra.forbid

    type: Optional[Type16] = None
    name: str
    datum: EngineeringDatum
    coordinate_system: Optional[CoordinateSystem] = None
    _schema: Optional[Any] = Field(None, alias='$schema')
    scope: Optional[Any] = None
    area: Optional[Any] = None
    bbox: Optional[Any] = None
    usages: Optional[Any] = None
    remarks: Optional[Any] = None
    id: Optional[Any] = None
    ids: Optional[Any] = None


class GeodeticCrs(OneAndOnlyOneOfDatumOrDatumEnsemble):
    class Config:
        extra = Extra.forbid

    type: Optional[Type18] = None
    name: str
    datum: Optional[Union[GeodeticReferenceFrame, DynamicGeodeticReferenceFrame]] = None
    datum_ensemble: Optional[DatumEnsemble] = None
    coordinate_system: Optional[CoordinateSystem] = None
    _schema: Optional[Any] = Field(None, alias='$schema')
    scope: Optional[Any] = None
    area: Optional[Any] = None
    bbox: Optional[Any] = None
    usages: Optional[Any] = None
    remarks: Optional[Any] = None
    id: Optional[Any] = None
    ids: Optional[Any] = None


class ProjectedCrs(BaseModel):
    class Config:
        extra = Extra.forbid

    type: Optional[Type25] = None
    name: str
    base_crs: GeodeticCrs
    conversion: Conversion
    coordinate_system: CoordinateSystem
    _schema: Optional[Any] = Field(None, alias='$schema')
    scope: Optional[Any] = None
    area: Optional[Any] = None
    bbox: Optional[Any] = None
    usages: Optional[Any] = None
    remarks: Optional[Any] = None
    id: Optional[Any] = None
    ids: Optional[Any] = None


class Datum(BaseModel):
    __root__: Union[
        GeodeticReferenceFrame,
        VerticalReferenceFrame,
        DynamicGeodeticReferenceFrame,
        DynamicVerticalReferenceFrame,
        TemporalDatum,
        ParametricDatum,
        EngineeringDatum,
    ]


class DerivedEngineeringCrs(BaseModel):
    class Config:
        extra = Extra.forbid

    type: Optional[Type8] = None
    name: str
    base_crs: EngineeringCrs
    conversion: Conversion
    coordinate_system: CoordinateSystem
    _schema: Optional[Any] = Field(None, alias='$schema')
    scope: Optional[Any] = None
    area: Optional[Any] = None
    bbox: Optional[Any] = None
    usages: Optional[Any] = None
    remarks: Optional[Any] = None
    id: Optional[Any] = None
    ids: Optional[Any] = None


class DerivedGeodeticCrs(BaseModel):
    class Config:
        extra = Extra.forbid

    type: Optional[Type9] = None
    name: str
    base_crs: GeodeticCrs
    conversion: Conversion
    coordinate_system: CoordinateSystem
    _schema: Optional[Any] = Field(None, alias='$schema')
    scope: Optional[Any] = None
    area: Optional[Any] = None
    bbox: Optional[Any] = None
    usages: Optional[Any] = None
    remarks: Optional[Any] = None
    id: Optional[Any] = None
    ids: Optional[Any] = None


class DerivedProjectedCrs(BaseModel):
    class Config:
        extra = Extra.forbid

    type: Optional[Type11] = None
    name: str
    base_crs: ProjectedCrs
    conversion: Conversion
    coordinate_system: CoordinateSystem
    _schema: Optional[Any] = Field(None, alias='$schema')
    scope: Optional[Any] = None
    area: Optional[Any] = None
    bbox: Optional[Any] = None
    usages: Optional[Any] = None
    remarks: Optional[Any] = None
    id: Optional[Any] = None
    ids: Optional[Any] = None


class ProjectionExtensionItem(StacExtensions):
    type: Any
    properties: Fields
    assets: Dict[str, Fields]


class ProjectionExtensionItem1(StacExtensions):
    type: Any
    assets: Optional[Dict[str, Fields]] = None
    item_assets: Optional[Dict[str, Fields]] = None


class ProjectionExtension(BaseModel):
    __root__: Union[ProjectionExtensionItem, ProjectionExtensionItem1] = Field(
        ...,
        description='STAC Projection Extension for STAC Items.',
        title='Projection Extension',
    )


class Fields(BaseModel):
    class Config:
        extra = Extra.forbid

    proj_epsg: Optional[Optional[int]] = Field(
        None, alias='proj:epsg', title='EPSG code'
    )
    proj_wkt2: Optional[Optional[str]] = Field(
        None, alias='proj:wkt2', title='Coordinate Reference System in WKT2 format'
    )
    proj_projjson: Optional[Optional[projjson.Schema]] = Field(
        None,
        alias='proj:projjson',
        title='Coordinate Reference System in PROJJSON format',
    )
    proj_geometry: Optional[Geometry] = Field(None, alias='proj:geometry')
    proj_bbox: Optional[List[float]] = Field(None, alias='proj:bbox', title='Extent')
    proj_centroid: Optional[ProjCentroid] = Field(
        None, alias='proj:centroid', title='Centroid'
    )
    proj_shape: Optional[List[int]] = Field(
        None, alias='proj:shape', max_items=2, min_items=2, title='Shape'
    )
    proj_transform: Optional[List[float]] = Field(
        None, alias='proj:transform', title='Transform'
    )


class BoundCrs(BaseModel):
    class Config:
        extra = Extra.forbid

    _schema: Optional[str] = Field(None, alias='$schema')
    type: Optional[Type2] = None
    source_crs: Crs
    target_crs: Crs
    transformation: AbridgedTransformation


class CompoundCrs(BaseModel):
    class Config:
        extra = Extra.forbid

    type: Optional[Type3] = None
    name: str
    components: List[Crs]
    _schema: Optional[Any] = Field(None, alias='$schema')
    scope: Optional[Any] = None
    area: Optional[Any] = None
    bbox: Optional[Any] = None
    usages: Optional[Any] = None
    remarks: Optional[Any] = None
    id: Optional[Any] = None
    ids: Optional[Any] = None


class ConcatenatedOperation(BaseModel):
    class Config:
        extra = Extra.forbid

    type: Optional[Type4] = None
    name: str
    source_crs: Crs
    target_crs: Crs
    steps: List[SingleOperation]
    _schema: Optional[Any] = Field(None, alias='$schema')
    scope: Optional[Any] = None
    area: Optional[Any] = None
    bbox: Optional[Any] = None
    usages: Optional[Any] = None
    remarks: Optional[Any] = None
    id: Optional[Any] = None
    ids: Optional[Any] = None


class Crs(BaseModel):
    __root__: Union[
        BoundCrs,
        CompoundCrs,
        DerivedEngineeringCrs,
        DerivedGeodeticCrs,
        DerivedParametricCrs,
        DerivedProjectedCrs,
        DerivedTemporalCrs,
        DerivedVerticalCrs,
        EngineeringCrs,
        GeodeticCrs,
        ParametricCrs,
        ProjectedCrs,
        TemporalCrs,
        VerticalCrs,
    ]


class DerivedVerticalCrs(BaseModel):
    class Config:
        extra = Extra.forbid

    type: Optional[Type13] = None
    name: str
    base_crs: VerticalCrs
    conversion: Conversion
    coordinate_system: CoordinateSystem
    _schema: Optional[Any] = Field(None, alias='$schema')
    scope: Optional[Any] = None
    area: Optional[Any] = None
    bbox: Optional[Any] = None
    usages: Optional[Any] = None
    remarks: Optional[Any] = None
    id: Optional[Any] = None
    ids: Optional[Any] = None


class SingleOperation(BaseModel):
    __root__: Union[Conversion, Transformation]


class Transformation(BaseModel):
    class Config:
        extra = Extra.forbid

    type: Optional[Type28] = None
    name: str
    source_crs: Crs
    target_crs: Crs
    interpolation_crs: Optional[Crs] = None
    method: Method
    parameters: List[ParameterValue]
    accuracy: Optional[str] = None
    _schema: Optional[Any] = Field(None, alias='$schema')
    scope: Optional[Any] = None
    area: Optional[Any] = None
    bbox: Optional[Any] = None
    usages: Optional[Any] = None
    remarks: Optional[Any] = None
    id: Optional[Any] = None
    ids: Optional[Any] = None


class GeoidModel(BaseModel):
    class Config:
        extra = Extra.forbid

    name: str
    interpolation_crs: Optional[Crs] = None
    id: Optional[Id] = None


class VerticalCrs(OneAndOnlyOneOfDatumOrDatumEnsemble):
    class Config:
        extra = Extra.forbid

    type: Optional[Type30] = None
    name: str
    datum: Optional[Union[VerticalReferenceFrame, DynamicVerticalReferenceFrame]] = None
    datum_ensemble: Optional[DatumEnsemble] = None
    coordinate_system: Optional[CoordinateSystem] = None
    geoid_model: Optional[GeoidModel] = None
    _schema: Optional[Any] = Field(None, alias='$schema')
    scope: Optional[Any] = None
    area: Optional[Any] = None
    bbox: Optional[Any] = None
    usages: Optional[Any] = None
    remarks: Optional[Any] = None
    id: Optional[Any] = None
    ids: Optional[Any] = None


ProjectionExtensionItem.update_forward_refs()
ProjectionExtensionItem1.update_forward_refs()
Fields.update_forward_refs()
BoundCrs.update_forward_refs()
CompoundCrs.update_forward_refs()
ConcatenatedOperation.update_forward_refs()
Crs.update_forward_refs()
DerivedVerticalCrs.update_forward_refs()
SingleOperation.update_forward_refs()
